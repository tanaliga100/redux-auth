{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 10,\n  price: \"$100\",\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counterSlice\",\n  initialState: initialState,\n  reducers: {\n    increment: state => {\n      return state.counter++;\n    },\n\n    decrement(state) {\n      return state.counter--;\n    },\n\n    increase(state, action) {\n      return state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter() {\n      return !state.showCounter;\n    }\n\n  }\n}); // const counterReducer = (state = initialState, action) => {\n//     switch (action.type) {\n//         case 'INC':\n//             return {counter: state.counter + 1 , showCounter: state.showCounter}\n//             break;\n//         case 'DEC':\n//             return {counter: state.counter - 1 , showCounter: state.showCounter }\n//             break;\n//         case 'increase':\n//             return {counter: state.counter + action.payload , showCounter: state.showCounter}\n//         case 'show_counter':\n//             return {showCounter: !state.showCounter,\n//             counter: state.counter}\n//         default:\n//             console.log('back to the state');\n//             return state;\n//     }\n// }\n\ncounterSlice.counterSlice.action.increment();\nconst store = configureStore({\n  reducer: {\n    counterSlice: counterSlice.reducer,\n    mainSlice: mainSlice.reducer\n  }\n});\nexport default store; // CLASS BASED REDUX\n// const initalState = {\n//     counter: 10\n// }\n// const counterReducer = ( state = initalState, action ) => {\n//     switch (action.type) {\n//         case 'INC':\n//             return {counter: state.counter + 1}\n//             break;\n//         case 'DEC':\n//             return {counter: state.counter - 1}\n//         default:\n//             return state\n//             break;\n//     }\n// }\n// const store = redux.createStore(counterReducer)\n// store.dispatch({type: 'INC'})\n// store.dispatch({type: 'DEC'})","map":{"version":3,"sources":["C:/Users/Administrator/OneDrive/Desktop/ACADEME/redux/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialState","counter","price","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","mainSlice"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAE,MAFY;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,YAAY,GAAGN,WAAW,CAAC;AAC/BO,EAAAA,IAAI,EAAE,cADyB;AAE/BL,EAAAA,YAAY,EAAEA,YAFiB;AAG/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB,aAAOA,KAAK,CAACP,OAAN,EAAP;AACD,KAHO;;AAIRQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACf,aAAOA,KAAK,CAACP,OAAN,EAAP;AACD,KANO;;AAORS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtB,aAAQH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAA/C;AACD,KATO;;AAURC,IAAAA,aAAa,GAAG;AACd,aAAO,CAACL,KAAK,CAACL,WAAd;AACD;;AAZO;AAHqB,CAAD,CAAhC,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,YAAY,CAACA,YAAb,CAA0BO,MAA1B,CAAiCJ,SAAjC;AAEA,MAAMO,KAAK,GAAGf,cAAc,CAAC;AAC3BgB,EAAAA,OAAO,EAAE;AAAEX,IAAAA,YAAY,EAAEA,YAAY,CAACW,OAA7B;AAAsCC,IAAAA,SAAS,EAAEA,SAAS,CAACD;AAA3D;AADkB,CAAD,CAA5B;AAIA,eAAeD,KAAf,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA","sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  counter: 10,\r\n  price: \"$100\",\r\n  showCounter: true,\r\n};\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counterSlice\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      return state.counter++;\r\n    },\r\n    decrement(state) {\r\n      return state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      return (state.counter = state.counter + action.payload);\r\n    },\r\n    toggleCounter() {\r\n      return !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//     switch (action.type) {\r\n//         case 'INC':\r\n//             return {counter: state.counter + 1 , showCounter: state.showCounter}\r\n//             break;\r\n//         case 'DEC':\r\n//             return {counter: state.counter - 1 , showCounter: state.showCounter }\r\n//             break;\r\n//         case 'increase':\r\n//             return {counter: state.counter + action.payload , showCounter: state.showCounter}\r\n//         case 'show_counter':\r\n//             return {showCounter: !state.showCounter,\r\n//             counter: state.counter}\r\n//         default:\r\n//             console.log('back to the state');\r\n//             return state;\r\n//     }\r\n// }\r\n\r\ncounterSlice.counterSlice.action.increment() \r\n\r\nconst store = configureStore({\r\n  reducer: { counterSlice: counterSlice.reducer, mainSlice: mainSlice.reducer },\r\n});\r\n\r\nexport default store;\r\n\r\n// CLASS BASED REDUX\r\n// const initalState = {\r\n//     counter: 10\r\n// }\r\n\r\n// const counterReducer = ( state = initalState, action ) => {\r\n\r\n//     switch (action.type) {\r\n//         case 'INC':\r\n//             return {counter: state.counter + 1}\r\n//             break;\r\n//         case 'DEC':\r\n//             return {counter: state.counter - 1}\r\n//         default:\r\n//             return state\r\n//             break;\r\n//     }\r\n\r\n// }\r\n\r\n// const store = redux.createStore(counterReducer)\r\n\r\n// store.dispatch({type: 'INC'})\r\n// store.dispatch({type: 'DEC'})\r\n"]},"metadata":{},"sourceType":"module"}